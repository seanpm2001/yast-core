
# ---------------------------------------------------------
#
#  Filename:	Builtin-String.ycp
#
#  Purpose:	test cases for all string builtins
#
# ---------------------------------------------------------

(mergestring ([], "."))
(mergestring (["abc", "dev", "ghi"], ""))
(mergestring (["abc", "dev", "ghi"], "123"))


("** deletechars **")

(deletechars ("1a2b3c", "abc"))
(deletechars ("1a2b3c", ""))
(deletechars ("", "abc"))
(deletechars ("", ""))


("** filterchars **")

(filterchars ("1a2b3c", "abc"))
(filterchars ("1a2b3c", ""))
(filterchars ("", "abc"))
(filterchars ("", ""))


("** crypt  -  disabled **")

//(crypt ("readable"))
//(cryptmd5 ("readable"))


("** tolower **")

(tolower ("aBcDeF"))

("** find et.al. **")

(find ("abcdefghi", "efg"))
(find ("aaaaa", "z"))

(search ("abcdefghi", "efg"))
(search ("aaaaa", "z"))

(findfirstnotof ("abcdefghi", "abcefghi"))
(findfirstnotof ("aaaaa", "a"))
(findfirstof ("abcdefghi", "cxdv"))
(findfirstof ("aaaaa", "z"))
(findlastof ("abcdecfghi", "cxdv"))
(findlastof ("aaaaa", "z"))


("** regex **")

(regexpmatch ("aaabbb", "ab") == true)
(regexpmatch ("aaabbb", "ba") == false)
(regexpmatch ("aaabbb", ".*ab.*") == true)
(regexpmatch ("aaabbb", ".*ba.*") == false)

(regexpsub ("aaabbb", "(.*ab).*", "s_\\1_e") == "s_aaab_e")
(regexpsub ("aaabbb", "(.*abb)(.*)", "s_\\1_e\\2") == "s_aaabb_eb")
// bnc#552914
(regexpsub ("aaabbb", "(a*b)(.*)", "\\1") == "aaab")
(regexpsub ("aaabbb", "(a*b)(.*)", "\\1\\1") == "aaabaaab")
(regexpsub ("aaabbb", "(a*b)(.*)", "\\") == "\\")
(regexpsub ("aaabbb", "(a*b)(.*)", "\\\\") == "\\\\")
(regexpsub ("aaabbb", "(a*b)(.*)", "A\\NZ") == "A\\NZ")
(regexpsub ("aaabbb", "(a*b)(.*)", "A\\\\1Z") == "A\\aaabZ")
(regexpsub ("machine=i386\\2ci486\\2ci586\\2ci686", "^([^=]*)=(.*)", "\\2") == "i386\\2ci486\\2ci586\\2ci686")

(regexptokenize ("aaabbBb", "(.*[[:upper:]]).*") == [ "aaabbB" ])
(regexptokenize ("aaabbb", "(.*ab)(.*)") == ["aaab", "bb"])
(regexptokenize ("aaabbb", "(.*ba).*") == [])
(regexptokenize ("aaabbb", "(.*ba).*()") == [])


("** sformat **")

(sformat ("%2 is greater %% than %1", 3, "five"))


("** conversions **")

(tostring (tofloat (63), 4))
(tostring (0.12345, 4))
(tohexstring (31))
(tohexstring (31, 4))

